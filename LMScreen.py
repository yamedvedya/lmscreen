#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        LMScreen.py
#
#  Project :     Tine Camera
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      yury.matveev$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["LMScreen", "LMScreenClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(LMScreen.additionnal_import) ENABLED START -----#
try:
    import PyTine as tine
except ImportError as err:
    tine = None
    tine_import_err = err

import numpy as np
import time
import subprocess
import scipy.ndimage.measurements as scipymeasure

SLOWCONTROL_MAP = {
    'SLOWCONTROL01': ['P01', 'P02', 'P03', 'P04', 'P05', 'P06', 'P07', 'P08', 'P09', 'P10', 'P11', 'P12', 'P13', 'P14'],
    'SLOWCONTROL01E': ['P21a', 'P21b', 'P22', 'P23', 'P24', 'P25'],
    'SLOWCONTROL01N': ['P61', 'P62', 'P63', 'P64', 'P65', 'P66']}

# ----------------------------------------------------------------------
def FWHM(array):
    try:
        half_max = (np.amax(array) - np.amin(array)) / 2
        diff = np.sign(array - half_max)
        left_idx = np.where(diff > 0)[0][0]
        right_idx = np.where(diff > 0)[0][-1]
        return right_idx - left_idx
    except:
        return 0

#----- PROTECTED REGION END -----#	//	LMScreen.additionnal_import

# Device States Description
# ON : 
# FAULT : 


class LMScreen (PyTango.Device_4Impl):
    """Tine Camera via pyTine interface (only working in python3)"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(LMScreen.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	LMScreen.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        LMScreen.init_device(self)
        #----- PROTECTED REGION ID(LMScreen.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LMScreen.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(LMScreen.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LMScreen.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_SubtractBackground_read = False
        self.attr_BackgroundSigmas_read = 0.0
        self.attr_Max_X_read = 0.0
        self.attr_Max_Y_read = 0.0
        self.attr_Max_Intensity_read = 0.0
        self.attr_COM_X_read = 0.0
        self.attr_COM_Y_read = 0.0
        self.attr_FWHM_X_read = 0.0
        self.attr_FWHM_Y_read = 0.0
        self.attr_ROI_SUM_read = 0.0
        self.attr_Value_Parameter_read = ""
        self.attr_Value_read = 0.0
        self.attr_ROI_X_read = 0
        self.attr_ROI_Y_read = 0
        self.attr_ROI_W_read = 0
        self.attr_ROI_H_read = 0
        self.attr_Gain_read = 0
        self.attr_GainMax_read = 0
        self.attr_GainMin_read = 0
        self.attr_ExposureTime_read = 0.0
        self.attr_ExposureTimeMin_read = 0.0
        self.attr_ExposureTimeMax_read = 0.0
        self.attr_Max_FPS_read = 0.0
        self.attr_Frame_read = [[0.0]]
        #----- PROTECTED REGION ID(LMScreen.init_device) ENABLED START -----#

        self.set_state(PyTango.DevState.ON)

        if tine is None:
            self.set_state(PyTango.DevState.FAULT)
            raise PyTango.DevError(f"Unable to import pyTine: {tine_import_err}")

        if self.Beamline is None:
            self.set_state(PyTango.DevState.FAULT)
            raise PyTango.WrongData("Beamline is not specified")
        else:
            beamline = str(self.Beamline).lower().replace('p', 'P')

        if self.Screen is None:
            self.set_state(PyTango.DevState.FAULT)
            raise PyTango.WrongData("Screen is not specified")
        else:
            screen = str(self.Screen).upper()
            if not self.Screen.startswith('LM'):
                screen = beamline + '_LM' + screen
            else:
                screen = beamline + '_' + screen

        self._screen_address = '/HASYLAB/' + screen + '/Output'
        for server, beamlines in SLOWCONTROL_MAP.items():
            if beamline in beamlines:
                self._slowcontrol_address = '/HASYLAB/' + server + '/' + screen

        self.attr_ExposureTimeMin_read = None
        self.attr_ExposureTimeMax_read = None

        self.attr_GainMax_read = None
        self.attr_GainMin_read = None

        if np.isclose(self.attr_Max_FPS_read, 0, atol=1e-3):
            self.attr_Max_FPS_read = 2

        self._last_refresh = time.time() - 2/self.attr_Max_FPS_read

        self._update_image()

        #----- PROTECTED REGION END -----#	//	LMScreen.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(LMScreen.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LMScreen.always_executed_hook

    # -------------------------------------------------------------------------
    #    LMScreen read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_SubtractBackground(self, attr):
        self.debug_stream("In read_SubtractBackground()")
        #----- PROTECTED REGION ID(LMScreen.SubtractBackground_read) ENABLED START -----#
        attr.set_value(self.attr_SubtractBackground_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.SubtractBackground_read
        
    def write_SubtractBackground(self, attr):
        self.debug_stream("In write_SubtractBackground()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(LMScreen.SubtractBackground_write) ENABLED START -----#
        self.attr_SubtractBackground_read = bool(int(data))
        #----- PROTECTED REGION END -----#	//	LMScreen.SubtractBackground_write
        
    def read_BackgroundSigmas(self, attr):
        self.debug_stream("In read_BackgroundSigmas()")
        #----- PROTECTED REGION ID(LMScreen.BackgroundSigmas_read) ENABLED START -----#
        attr.set_value(self.attr_BackgroundSigmas_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.BackgroundSigmas_read
        
    def write_BackgroundSigmas(self, attr):
        self.debug_stream("In write_BackgroundSigmas()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(LMScreen.BackgroundSigmas_write) ENABLED START -----#
        self.attr_BackgroundSigmas_read = float(data)
        #----- PROTECTED REGION END -----#	//	LMScreen.BackgroundSigmas_write
        
    def read_Max_X(self, attr):
        self.debug_stream("In read_Max_X()")
        #----- PROTECTED REGION ID(LMScreen.Max_X_read) ENABLED START -----#
        self._update_image()
        attr.set_value(self.attr_Max_X_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.Max_X_read
        
    def read_Max_Y(self, attr):
        self.debug_stream("In read_Max_Y()")
        #----- PROTECTED REGION ID(LMScreen.Max_Y_read) ENABLED START -----#
        self._update_image()
        attr.set_value(self.attr_Max_Y_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.Max_Y_read
        
    def read_Max_Intensity(self, attr):
        self.debug_stream("In read_Max_Intensity()")
        #----- PROTECTED REGION ID(LMScreen.Max_Intensity_read) ENABLED START -----#
        self._update_image()
        attr.set_value(self.attr_Max_Intensity_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.Max_Intensity_read
        
    def read_COM_X(self, attr):
        self.debug_stream("In read_COM_X()")
        #----- PROTECTED REGION ID(LMScreen.COM_X_read) ENABLED START -----#
        self._update_image()
        attr.set_value(self.attr_COM_X_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.COM_X_read
        
    def read_COM_Y(self, attr):
        self.debug_stream("In read_COM_Y()")
        #----- PROTECTED REGION ID(LMScreen.COM_Y_read) ENABLED START -----#
        self._update_image()
        attr.set_value(self.attr_COM_Y_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.COM_Y_read
        
    def read_FWHM_X(self, attr):
        self.debug_stream("In read_FWHM_X()")
        #----- PROTECTED REGION ID(LMScreen.FWHM_X_read) ENABLED START -----#
        self._update_image()
        attr.set_value(self.attr_FWHM_X_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.FWHM_X_read
        
    def read_FWHM_Y(self, attr):
        self.debug_stream("In read_FWHM_Y()")
        #----- PROTECTED REGION ID(LMScreen.FWHM_Y_read) ENABLED START -----#
        self._update_image()
        attr.set_value(self.attr_FWHM_Y_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.FWHM_Y_read
        
    def read_ROI_SUM(self, attr):
        self.debug_stream("In read_ROI_SUM()")
        #----- PROTECTED REGION ID(LMScreen.ROI_SUM_read) ENABLED START -----#
        self._update_image()
        attr.set_value(self.attr_ROI_SUM_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.ROI_SUM_read
        
    def read_Value_Parameter(self, attr):
        self.debug_stream("In read_Value_Parameter()")
        #----- PROTECTED REGION ID(LMScreen.Value_Parameter_read) ENABLED START -----#
        attr.set_value(self.attr_Value_Parameter_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.Value_Parameter_read
        
    def write_Value_Parameter(self, attr):
        self.debug_stream("In write_Value_Parameter()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(LMScreen.Value_Parameter_write) ENABLED START -----#
        self.attr_Value_Parameter_read = str(data)
        #----- PROTECTED REGION END -----#	//	LMScreen.Value_Parameter_write
        
    def read_Value(self, attr):
        self.debug_stream("In read_Value()")
        #----- PROTECTED REGION ID(LMScreen.Value_read) ENABLED START -----#
        self._update_image()
        param = self.attr_Value_Parameter_read.lower()
        if param == 'max_i':
            self.attr_Value_read = self.attr_Max_Intensity_read
        elif param == 'max_x':
            self.attr_Value_read = self.attr_Max_X_read
        elif param == 'max_y':
            self.attr_Value_read = self.attr_Max_Y_read
        elif param == 'com_x':
            self.attr_Value_read = self.attr_COM_X_read
        elif param == 'com_y':
            self.attr_Value_read = self.attr_COM_Y_read
        elif param == 'fwhm_x':
            self.attr_Value_read = self.attr_FWHM_X_read
        elif param == 'fwhm_y':
            self.attr_Value_read = self.attr_FWHM_Y_read
        elif param == 'sum':
            self.attr_Value_read = self.attr_ROI_SUM_read

        attr.set_value(self.attr_Value_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.Value_read
        
    def read_ROI_X(self, attr):
        self.debug_stream("In read_ROI_X()")
        #----- PROTECTED REGION ID(LMScreen.ROI_X_read) ENABLED START -----#
        attr.set_value(self.attr_ROI_X_read)

        #----- PROTECTED REGION END -----#	//	LMScreen.ROI_X_read
        
    def write_ROI_X(self, attr):
        self.debug_stream("In write_ROI_X()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(LMScreen.ROI_X_write) ENABLED START -----#
        self.attr_ROI_X_read = int(data)
        #----- PROTECTED REGION END -----#	//	LMScreen.ROI_X_write
        
    def read_ROI_Y(self, attr):
        self.debug_stream("In read_ROI_Y()")
        #----- PROTECTED REGION ID(LMScreen.ROI_Y_read) ENABLED START -----#
        attr.set_value(self.attr_ROI_Y_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.ROI_Y_read
        
    def write_ROI_Y(self, attr):
        self.debug_stream("In write_ROI_Y()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(LMScreen.ROI_Y_write) ENABLED START -----#
        self.attr_ROI_Y_read = int(data)
        #----- PROTECTED REGION END -----#	//	LMScreen.ROI_Y_write
        
    def read_ROI_W(self, attr):
        self.debug_stream("In read_ROI_W()")
        #----- PROTECTED REGION ID(LMScreen.ROI_W_read) ENABLED START -----#
        attr.set_value(self.attr_ROI_W_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.ROI_W_read
        
    def write_ROI_W(self, attr):
        self.debug_stream("In write_ROI_W()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(LMScreen.ROI_W_write) ENABLED START -----#
        self.attr_ROI_W_read = int(data)
        #----- PROTECTED REGION END -----#	//	LMScreen.ROI_W_write
        
    def read_ROI_H(self, attr):
        self.debug_stream("In read_ROI_H()")
        #----- PROTECTED REGION ID(LMScreen.ROI_H_read) ENABLED START -----#
        attr.set_value(self.attr_ROI_H_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.ROI_H_read
        
    def write_ROI_H(self, attr):
        self.debug_stream("In write_ROI_H()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(LMScreen.ROI_H_write) ENABLED START -----#
        self.attr_ROI_H_read = int(data)
        #----- PROTECTED REGION END -----#	//	LMScreen.ROI_H_write
        
    def read_Gain(self, attr):
        self.debug_stream("In read_Gain()")
        #----- PROTECTED REGION ID(LMScreen.Gain_read) ENABLED START -----#
        self.attr_Gain_read = self.get_gain_exposure_value('GainValue')
        attr.set_value(self.attr_Gain_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.Gain_read
        
    def write_Gain(self, attr):
        self.debug_stream("In write_Gain()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(LMScreen.Gain_write) ENABLED START -----#
        if self.attr_GainMax_read is None or self.attr_GainMin_read is None:
            self.get_limits()

        if self.attr_GainMax_read is None:
            value_max = 22
        else:
            value_max = self.attr_GainMax_read

        if self.attr_GainMin_read is None:
            value_min = 0
        else:
            value_min = self.attr_GainMin_read

        value_to_set = int(max(min(data, value_max), value_min))

        print (f'Setting Gain {value_to_set}')
        self.tine_set('GainValue.Set', value_to_set)

        #----- PROTECTED REGION END -----#	//	LMScreen.Gain_write
        
    def read_GainMax(self, attr):
        self.debug_stream("In read_GainMax()")
        #----- PROTECTED REGION ID(LMScreen.GainMax_read) ENABLED START -----#

        if self.attr_GainMax_read is None:
            self.get_limits()

        if self.attr_GainMax_read is None:
            attr.set_value(22)
        else:
            attr.set_value(self.attr_GainMax_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.GainMax_read
        
    def read_GainMin(self, attr):
        self.debug_stream("In read_GainMin()")
        #----- PROTECTED REGION ID(LMScreen.GainMin_read) ENABLED START -----#

        if self.attr_GainMin_read is None:
            self.get_limits()

        if self.attr_GainMin_read is None:
            attr.set_value(0)
        else:
            attr.set_value(self.attr_GainMin_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.GainMin_read
        
    def read_ExposureTime(self, attr):
        self.debug_stream("In read_ExposureTime()")
        #----- PROTECTED REGION ID(LMScreen.ExposureTime_read) ENABLED START -----#
        self.attr_ExposureTime_read = self.get_gain_exposure_value('ExposureValue') / 1000000.
        attr.set_value(self.attr_ExposureTime_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.ExposureTime_read
        
    def write_ExposureTime(self, attr):
        self.debug_stream("In write_ExposureTime()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(LMScreen.ExposureTime_write) ENABLED START -----#

        if self.attr_ExposureTimeMax_read is None or self.attr_ExposureTimeMin_read is None:
            self.get_limits()

        if self.attr_ExposureTimeMax_read is None:
            value_max = 10000000
        else:
            value_max = self.attr_ExposureTimeMax_read*1e6

        if self.attr_ExposureTimeMin_read is None:
            value_min = 1
        else:
            value_min = self.attr_ExposureTimeMin_read*1e6

        value_to_set = int(max(min(data*1000000, value_max), value_min))
        print(f'Setting Exposure {value_to_set}')

        self.tine_set('ExposureValue.Set', value_to_set)

        #----- PROTECTED REGION END -----#	//	LMScreen.ExposureTime_write
        
    def read_ExposureTimeMin(self, attr):
        self.debug_stream("In read_ExposureTimeMin()")
        #----- PROTECTED REGION ID(LMScreen.ExposureTimeMin_read) ENABLED START -----#

        if self.attr_ExposureTimeMin_read is None:
            self.get_limits()

        if self.attr_ExposureTimeMin_read is None:
            attr.set_value(0.)
        else:
            attr.set_value(self.attr_ExposureTimeMin_read)

        
        #----- PROTECTED REGION END -----#	//	LMScreen.ExposureTimeMin_read
        
    def read_ExposureTimeMax(self, attr):
        self.debug_stream("In read_ExposureTimeMax()")
        #----- PROTECTED REGION ID(LMScreen.ExposureTimeMax_read) ENABLED START -----#

        if self.attr_ExposureTimeMax_read is None:
            self.get_limits()

        if self.attr_ExposureTimeMax_read is None:
            attr.set_value(10000000.)
        else:
            attr.set_value(self.attr_ExposureTimeMax_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.ExposureTimeMax_read
        
    def read_Max_FPS(self, attr):
        self.debug_stream("In read_Max_FPS()")
        #----- PROTECTED REGION ID(LMScreen.Max_FPS_read) ENABLED START -----#
        attr.set_value(self.attr_Max_FPS_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.Max_FPS_read
        
    def write_Max_FPS(self, attr):
        self.debug_stream("In write_Max_FPS()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(LMScreen.Max_FPS_write) ENABLED START -----#
        self.attr_Max_FPS_read = data
        #----- PROTECTED REGION END -----#	//	LMScreen.Max_FPS_write
        
    def read_Frame(self, attr):
        self.debug_stream("In read_Frame()")
        #----- PROTECTED REGION ID(LMScreen.Frame_read) ENABLED START -----#

        self._update_image()
        attr.set_value(self.attr_Frame_read)
        
        #----- PROTECTED REGION END -----#	//	LMScreen.Frame_read
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(LMScreen.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LMScreen.read_attr_hardware


    # -------------------------------------------------------------------------
    #    LMScreen command methods
    # -------------------------------------------------------------------------
    

    #----- PROTECTED REGION ID(LMScreen.programmer_methods) ENABLED START -----#

    def tine_get(self, parameter):
        try:
            value = tine.get(self._slowcontrol_address, parameter, format='INT32', size=1)['data']
        except OSError:
            try:
                pipe = subprocess.Popen(["tget", self._slowcontrol_address, parameter], stdout=subprocess.PIPE)
                value = int(pipe.communicate()[0])
            except:
                raise RuntimeError('Cannot read {}'.format(parameter))

        return value

    # -------------------------------------------------------------------------
    def tine_set(self, parameter, value):
        try:
            tine.set(self._slowcontrol_address, parameter, value, format='INT32', size=1)
        except OSError:
            value = int(value)
            subprocess.Popen(["tsend", self._slowcontrol_address, parameter, str(value)])
            if self.tine_get(parameter) != value:
                raise RuntimeError('Cannot set {}'.format(value))

    # -------------------------------------------------------------------------
    def get_limits(self):
        try:
            self.attr_ExposureTimeMax_read = self.tine_get('ExposureValue.Max') / 1000000.
        except:
            pass

        try:
            self.attr_ExposureTimeMin_read = self.tine_get('ExposureValue.Min') / 1000000.
        except:
            pass

        try:
            self.attr_GainMax_read = self.tine_get('GainValue.Max')
        except:
            pass

        try:
            self.attr_GainMin_read = self.tine_get('GainValue.Min')
        except:
            pass

    # -------------------------------------------------------------------------
    def get_gain_exposure_value(self, attribute_name):
        try:
            value = self.tine_get('{}.Set'.format(attribute_name))
        except:
            try:
                value = self.tine_get('{}.Rdbk'.format(attribute_name))
                self.tine_set('{}.Set'.format(attribute_name), value)
                return
            except Exception as err:
                print(err)
                value = None

        return value

    # ----------------------------------------------------------------------
    def _update_image(self):

        if time.time() < self._last_refresh + 1/self.attr_Max_FPS_read:
            return self.attr_Frame_read

        try:
            device_property = tine.get(self._screen_address, "frame", mode='CONNECT')
            self.set_state(PyTango.DevState.ON)
            self.set_status(f"Got last frame at: {time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime())}")
        except (OSError, RuntimeError) as err:
            self.set_state(PyTango.DevState.FAULT)
            self.set_status(f"Unable to read Frame: {err}")
            return

        status = tine.strerror(device_property["status"])
        if status.endswith(": success"):
            try:
                img = np.array(self.tine_image_to_numpy(device_property["data"]))
            except ValueError as err:
                self.set_state(PyTango.DevState.FAULT)
                self.set_status(f"Unable to read Frame: {err}")
                return
        else:
            img = None

        if img is not None and self.attr_SubtractBackground_read:
            img[img < np.mean(img) + self.attr_BackgroundSigmas_read * np.std(img)] = 0

        try:
            x, y, w, h, = self.attr_ROI_X_read, self.attr_ROI_Y_read, self.attr_ROI_W_read, self.attr_ROI_H_read
            roi_array = img[x:x + w, y:y + h]
        except Exception as err:
            roi_array = img
            x, y = 0, 0

        self.attr_ROI_SUM_read = np.sum(roi_array)

        try:
            roi_extrema = scipymeasure.extrema(roi_array)
        except Exception as err:
            roi_extrema = (0, 0, (0, 0), (0, 0))
        self.attr_Max_Intensity_read = roi_extrema[1]
        self.attr_Max_X_read = roi_extrema[3][0] + x
        self.attr_Max_Y_read = roi_extrema[3][1] + y

        try:
            roi_com = scipymeasure.center_of_mass(roi_array)
        except Exception as err:
            roi_com = (0, 0)

        self.attr_COM_X_read = roi_com[0] + x
        self.attr_COM_Y_read = roi_com[1] + y

        self.attr_FWHM_X_read = FWHM(np.sum(roi_array, axis=0))
        self.attr_FWHM_Y_read = FWHM(np.sum(roi_array, axis=1))

        self.attr_Frame_read = img

        self._last_refresh = time.time()

    # -------------------------------------------------------------------------
    def get_tine_image_height(self, frameHeader):
        if frameHeader["aoiHeight"] > 0:
            height = frameHeader["aoiHeight"]
        else:
            height = frameHeader["sourceHeight"]

        if not 0 < height <= 65535:
            raise ValueError("Invalid height = {}".format(height))

        return height

    # -------------------------------------------------------------------------
    def get_tine_image_width(self, frameHeader):
        if frameHeader["aoiWidth"] > 0:
            width = frameHeader["aoiWidth"]
        else:
            width = frameHeader["sourceWidth"]

        if not 0 < width <= 65535:
            raise ValueError("Invalid width = {}".format(width))

        return width

    # -------------------------------------------------------------------------
    def get_tine_image_dtype(self, frameHeader):
        # TODO: Endianness?
        if frameHeader["bytesPerPixel"] == 1:
            dtype = "u1"
        elif frameHeader["bytesPerPixel"] == 2:
            dtype = "u2"
        else:
            raise ValueError("Invalid bytesPerPixel = {}".format(
                frameHeader["bytesPerPixel"]))

        return dtype

    # -------------------------------------------------------------------------
    def tine_image_to_numpy(self, data):
        frameHeader = data["frameHeader"]

        height = self.get_tine_image_height(frameHeader)
        width = self.get_tine_image_width(frameHeader)
        dtype = self.get_tine_image_dtype(frameHeader)

        bytes = np.frombuffer(data["imageBytes"], dtype=dtype)

        if len(bytes) != height * width:
            raise ValueError(
                "Dimension mismatch: len(bytes) = {}, height*width = {}".format(
                    len(bytes), height * width))

        frame = bytes.reshape((height, width))

        if self.Flip_V == 1 and self.Flip_H == 1:
            return frame[::-1, ::-1]

        elif self.Flip_H == 1:
            return frame[::, ::-1]

        elif self.Flip_V == 1:
            return frame[::-1, :]

        if self.Rotate != 0:
            return np.rot90(frame, self.Rotate)

        return np.copy(frame)

    #----- PROTECTED REGION END -----#	//	LMScreen.programmer_methods

class LMScreenClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(LMScreen.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	LMScreen.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'Beamline':
            [PyTango.DevString, 
            "Beamline name: P01, P02, P03, P04, P05, P06, P07, P08, P09, P10, P11, P12, P13, P14, P21a, P21b, P22, P23, P24, P25, P61, P62, P63, P64, P65, P66",
            [] ],
        'Screen':
            [PyTango.DevString, 
            "LM Screen number:  1, 2, etc.",
            [] ],
        'Flip_V':
            [PyTango.DevShort, 
            "If True - image will be flipped vertically",
            [0]],
        'Flip_H':
            [PyTango.DevShort, 
            "If True - the image will be flipped horizontally",
            [0]],
        'Rotate':
            [PyTango.DevShort, 
            "define the rotation angle in 90 deg steps (!!). E.g. Rotate_Angle = 3 means 270 deg rotation",
            [0]],
        }


    #    Command definitions
    cmd_list = {
        }


    #    Attribute definitions
    attr_list = {
        'SubtractBackground':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'BackgroundSigmas':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'Max_X':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "px",
                'display unit': "px",
                'description': "x coordinate of intensity maxumum within ROI",
            } ],
        'Max_Y':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "px",
                'display unit': "px",
                'description': "y coordinate of intensity maxumum within ROI",
            } ],
        'Max_Intensity':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description': "maxumum intensity value in ROI",
            } ],
        'COM_X':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "px",
                'display unit': "px",
                'description': "x coordinate of ROI`s center of mass",
            } ],
        'COM_Y':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "px",
                'display unit': "px",
                'description': "y coordinate of ROI`s center of mass",
            } ],
        'FWHM_X':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "px",
                'display unit': "px",
                'description': "horizontal size of peak wihtin ROI",
            } ],
        'FWHM_Y':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "px",
                'display unit': "px",
                'description': "vertical size of peak wihtin ROI",
            } ],
        'ROI_SUM':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description': "sum of intensity over ROI",
            } ],
        'Value_Parameter':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description': "which parameter will be use as a ``source`` for Sardana. Can be `max_i`, `max_x`, `max_y`, `com_x`, `com_y`, `fwhm_x`, `fwhm_y`, `sum`",
                'Memorized':"true"
            } ],
        'Value':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description': "value to be passed to Sardana",
            } ],
        'ROI_X':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "px",
                'display unit': "px",
                'description': "x coordinate of left top ROI corner",
                'Memorized':"true"
            } ],
        'ROI_Y':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "px",
                'display unit': "px",
                'description': "y coordinate of left top ROI corner",
                'Memorized':"true"
            } ],
        'ROI_W':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "px",
                'display unit': "px",
                'description': "ROI width",
                'Memorized':"true"
            } ],
        'ROI_H':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "px",
                'display unit': "px",
                'description': "ROI height",
                'Memorized':"true"
            } ],
        'Gain':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "db",
                'display unit': "db",
            } ],
        'GainMax':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "db",
                'display unit': "db",
            } ],
        'GainMin':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "db",
                'display unit': "db",
            } ],
        'ExposureTime':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "sec",
                'display unit': "sec",
            } ],
        'ExposureTimeMin':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "sec",
                'display unit': "sec",
            } ],
        'ExposureTimeMax':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "sec",
                'display unit': "sec",
            } ],
        'Max_FPS':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'max value': "5",
                'min value': "0.1",
                'description': "Set the maximum refresh rate for camera",
                'Memorized':"true"
            } ],
        'Frame':
            [[PyTango.DevDouble,
            PyTango.IMAGE,
            PyTango.READ, 1024, 1024]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(LMScreenClass, LMScreen, 'LMScreen')
        #----- PROTECTED REGION ID(LMScreen.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LMScreen.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
